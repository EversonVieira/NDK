using Dapper;
using Microsoft.Extensions.Logging;
using NDK.Core.Attributes;
using NDK.Core.Models;
using NDK.Core.Utility;
using NDK.Database.ExtensionMethods;
using NDK.Database.ExtensionMethods.Internal;
using NDK.Database.Handlers;
using NDK.Database.Models;
using System.Data.Common;
using System.Reflection;
using System.Text;

namespace NDK.Database.Base
{
    public class NDKSimpleEntityRepository<TModel, TUser> :NDKBaseRepository<TModel,TUser>
        where TModel : NDKBaseModel 
        where TUser:NDKUser
    {
        private readonly TUser _loggedUser;
        private readonly NDKSimpleEntityRepositoryConfig _config;
        private readonly ILogger _logger;

        public NDKSimpleEntityRepository(TUser loggedUser,
                                         NDKDbConnectionHandler connectionHandler,
                                         NDKSimpleEntityRepositoryConfig config,
                                         NDKDbCommandConfiguration commandConfiguration,
                                         ILogger<NDKSimpleEntityRepository<TModel, TUser>> logger):base(connectionHandler, commandConfiguration ,logger)
        {
            _loggedUser = loggedUser;
            _config = config;
            _logger = logger;
        }

        public virtual NDKResponse<long> Delete(TModel entity, DbConnection connection)
        {
            NDKResponse<long> response = new();

            base.ApplyBaseModelValues(_loggedUser, entity);

            try
            {
                var result = connection.ExecuteScalar<object>(GetDeleteString(entity), entity);

                response.Result = Convert.ToInt64(result);
            }
            catch (Exception ex)
            {
                base.HandleException(ex, response, _logger);
            }

            return response;
        }

        public virtual NDKListResponse<TModel> GetByRequest(NDKRequest request, DbConnection connection)
        {
            NDKListResponse<TModel> response = new();

            TModel entity = Activator.CreateInstance<TModel>();
            var queryParams = request.GetRequestData(GetSelectString(entity), this._connectionHandler._configuration);

            response.Result = connection.Query<TModel>(queryParams.query, queryParams).ToList();

            var countRequest = request.Clone();
            countRequest.Pager = null;

            queryParams = request.GetRequestData(GetSelectCountString(entity), this._connectionHandler._configuration);

            response.TotalItems = connection.Query<long>(queryParams.query, queryParams).ToList().FirstOrDefault();


            return response;
        }

        public virtual NDKResponse<long> Insert(TModel entity, DbConnection connection)
        {
            NDKResponse<long> response = new();

            base.ApplyBaseModelValues(_loggedUser, entity);

            try
            {
                var result = connection.ExecuteScalar<object>(GetInsertSql(entity), entity);

                response.Result = Convert.ToInt64(result);
            }
            catch(Exception ex)
            {
                base.HandleException(ex, response, _logger);
            }
            

            return response;
        }

        public virtual NDKResponse<long> Update(TModel entity, DbConnection connection)
        {
            NDKResponse<long> response = new();

            base.ApplyBaseModelValues(_loggedUser, entity);

            try
            {
                var result = connection.ExecuteScalar<object>(GetUpdateSql(entity), entity);

                response.Result = Convert.ToInt64(result);
            }
            catch (Exception ex)
            {
                base.HandleException(ex, response, _logger);
            }

            return response;
        }

        private string GetInsertSql(TModel entity)
        {
            StringBuilder sb = new StringBuilder();

            ValidateInput(entity);

            IEnumerable<PropertyInfo> properties = entity.GetType().GetProperties().Where(x => !x.GetCustomAttribute<NDKPrimaryKey>()?.AutoGenerated ?? false);

            sb.AppendLine($"INSERT INTO {_config.GetEntityTable(entity.GetType())} ");

            sb.AppendLine($"({string.Join(',', properties.Select(x => x.Name))})");
            sb.AppendLine($"VALUES({string.Join(',', properties.Select(x => $"{_connectionHandler._configuration.GetParamSymbol()}{x.Name}"))}) ");

            sb.AppendLine(_connectionHandler._configuration.GetInsertSelectResult());

            return sb.ToString();
        }

        private string GetUpdateSql(TModel entity)
        {
            StringBuilder sb = new StringBuilder();

            ValidateInput(entity);

            IEnumerable<PropertyInfo> properties = entity.GetType().GetProperties().Where(x => !x.GetCustomAttribute<NDKPrimaryKey>()?.AutoGenerated ?? false);

            sb.AppendLine($"UPDATE {_config.GetEntityTable(entity.GetType())} SET");
            sb.AppendLine($"{string.Join(',', properties.Select(x => $"{x.Name} = {_connectionHandler._configuration.GetParamSymbol()}{x.Name}"))}");
            sb.AppendLine($"WHERE Id = {_connectionHandler._configuration.GetParamSymbol()}Id");
            sb.AppendLine(_connectionHandler._configuration.GetUpdateOrDeleteResult());


            return sb.ToString();
        }

        private string GetDeleteString(TModel entity)
        {
            StringBuilder sb = new StringBuilder();

            ValidateInput(entity);

            IEnumerable<PropertyInfo> properties = entity.GetType().GetProperties().Where(x => !x.GetCustomAttribute<NDKPrimaryKey>()?.AutoGenerated ?? false);

            sb.AppendLine($"DELETE FROM {_config.GetEntityTable(entity.GetType())} WHERE ID = {_connectionHandler._configuration.GetParamSymbol()}Id ");
            sb.AppendLine(_connectionHandler._configuration.GetUpdateOrDeleteResult());



            return sb.ToString();
        }

        private string GetSelectString(TModel entity)
        {
            StringBuilder sb = new StringBuilder();

            ValidateInput(entity);

            IEnumerable<PropertyInfo> properties = entity.GetType().GetProperties();

            sb.AppendLine($"SELECT {string.Join(",", properties.Select(x => x.Name))} FROM {_config.GetEntityTable(entity.GetType())} ");

            return sb.ToString();
        }

        private string GetSelectCountString(TModel entity)
        {
            StringBuilder sb = new StringBuilder();

            ValidateInput(entity);

            IEnumerable<PropertyInfo> properties = entity.GetType().GetProperties();

            sb.AppendLine($"SELECT COUNT(Id) FROM {_config.GetEntityTable(entity.GetType())} ");

            return sb.ToString();
        }

        private void ValidateInput(TModel entity)
        {
            var props = entity.GetType().GetProperties();

            if (!props.AsList().Exists(x => x.GetCustomAttribute<NDKPrimaryKey>() != null))
            {
                throw new InvalidDataException("Should provide the NDKPrimaryKey attribute to the Model you're trying to use with this method");
            }
        }
    }


}
